## Assignment Part-1
Q1. Why do we call Python as a general purpose and high-level programming language?
A.  Python is called as general purpose language beacuse it is used for creating all type of programs and not specialized for any specific problems and it is called as high level language because it's easy for humans to understand.

Q2. Why is Python called a dynamically typed language?
A.  Python is called dynamically typed language because in python the interpreter assigns variables a type at runtime based on the variable's value at that time. It means that it doesn't know the type of varible until the code is run.

Q3. List some pros and cons of Python programming language?
A.  Pros:
        Python is easy to learn and read.
        Python is extensible.
        Python is free open source.
        Python is portable programming language.
        Python is an interpreted language.
        Python has Extensive libraries.
        Python is highly scalable.

    Cons:
        Python is slow compared to compiled programming languages.
        Python can have runtime errors.
        Python consumes a lot of memory space.
        Python is dynamically typed.
    
Q4. In what all domains can we use Python?
A.  * Big Data Engineering
    * Data Scientist
    * Machine Learning/ Artificial intelligence
    * Desktop GUI
    * Data analytics and Data Visualization
    * Web development
    * Game development
    * Embedded Systems

Q5. What are variable and how can we declare them?
    Variable is a name of the memory location. variables are used to store data and it's value can be changed and can be reused many times. In python a variable is a symbolic name that is a refernce or pointer to an object. Once an object is assigned to a variable, you can refer to the object by that name.

    Declaring a variable in python:
    * Just name the variable 
    * Assign some value to that varibale
    * The data type of the variable will be automatically determined from the value assigned, we need not define it explicitly as python is dynamically typed language.
    Ex: x=2

Q6. How can we take an input from the user in Python?
A.  Using "input()" we can take an input from the user.

Q7. What is the default datatype of the value that has been taken as an input using input() function?
A.  String is the default datatype of the value that has been taken as an input using input() function.

Q8. What is type casting?
A.  Type casting is converting primitive data type of a value in to another primitive data type. 

Q9. Can we take more than one input from the user using single input() function? If yes, how? If no, why?
A.  Yes, we can take multiple inputs from user using single input() function. We can achieve by using split() function.
    ex: x, y, z = input("Enter values).split()

Q10. What are keywords?
A.   Python keywords are special reserved words that have specific meaning and purposes and can't be as a variable.

Q11. Can we use keywords as a variable? Support your answer with reason.
A.   No, we cannot use keywords as a variable. Keywords are reserved words that have specific meaning and puposes and can't be used for  anything except for those purposes.

Q12. What is indentation? What's the use of indentaion in Python?
A.   Indentation refers to spaces at the beginning of a code line. In python indentation is very important unlike other programming   languages. Python uses indentation to indicate block of code.

Q13. How can we throw some output in Python?
A.   Using print() function we can throw some output in python.

Q14. What are operators in Python?
A.   In Python, operators are special symbols that carry arithmetic and logical computation.

Q15. What is difference between / and // operators?
A.   / Only perform the division operation and returns float value or classic division value.
     // Only perform the division operation and returns integer value or floor division value.

Q16. Write a code that gives following as an output.
```
iNeuroniNeuroniNeuroniNeuron
```
A.  print(“iNeuroniNeuroniNeuroniNeuron”)

Q17. Write a code to take a number as an input from the user and check if the number is odd or even.
A.   num = int(input("Enter a number"))
     if(num%2 == 0):
        print("Even")
     else:
        print("Odd")

Q18. What are boolean operator?
A.   The logical operators and, or and not are also referred to as boolean operators. It return either true or false as answer.

Q19. What will the output of the following?
```
1 or 0

0 and 0

True and False and True

1 or 0 or 0
```
A.  *1 or 0 = 1
    *0 and 0 = 0
    *True and False and True = False
    *1 or 0 or 0 = 1

Q20. What are conditional statements in Python?
A.   Conditional statements in python perform different computations or actions depending on whether a specific boolean constraint evaluates to true or false. Conditional statements are handled by if statements in python.

Q21. What is use of 'if', 'elif' and 'else' keywords?
A.   if, elif and else keywords are in python for decision making that is required when you want to execute code based on a particular condition. 

Q22. Write a code to take the age of person as an input and if age >= 18 display "I can vote". If age is < 18 display "I can't vote".
A.   #code

    age = int(input(“Enter your age”))
    if( age >= 18):
	    print(“I can vote”)
    else:
	    print(“I can’t vote”)

Q23. Write a code that displays the sum of all the even numbers from the given list.
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
A.   #code
    numbers = [12, 75, 150, 180, 145, 525, 50]
    sum = 0
    for i in range(len(numbers)):
        if ( numbers[i] % 2 == 0):
		    sum += numbers[i]
     
    print(sum)

Q24. Write a code to take 3 numbers as an input from the user and display the greatest no as output.
A.  num1 = int(input("Enter first number"))
    num2 = int(input("Enter second number"))
    num3 = int(input("Enter third number"))

    if (num1 >= num2) and (num1 >= num3):
        largest = num1
    elif (num2 >= num1) and (num2 >= num3):
        largest = num2
    else:
        largest = num3

    print("Greatest number is: ", largest)

Q25. Write a program to display only those numbers from a list that satisfy the following conditions

- The number must be divisible by five

- If the number is greater than 150, then skip it and move to the next number

- If the number is greater than 500, then stop the loop
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
A.  numbers = [12, 75, 150, 180, 145, 525, 50]

    for i in range(len(numbers)):
    if(numbers[i] % 5 == 0):
        if(numbers[i] <= 150):
            print(numbers[i])
    elif(numbers[i] > 150 and numbers[i] <= 500):
        continue
    elif(numbers[i] > 500):
        break

Q26. What is a string? How can we declare string in Python?
A.  Strings in python are array of bytes of representing unicode characters. In python strings can be created by enclosing characters inside a single quote or double-quotes. Even triple quotes can also be used but generally used to represent multiline strings and docstrings.

Q27. How can we access the string using its index?
A.  You can access the characters in a string by referring to its index number inside square brackets[].

Q28. Write a code to get the desired output of the following
```
string = "Big Data iNeuron"
desired_output = "iNeuron"
```
A.  string = "Big Data iNeuron"
    print(string[9:])

Q29. Write a code to get the desired output of the following
```
string = "Big Data iNeuron"
desired_output = "norueNi"
```
A.  string = "Big Data iNeuron"
    print(string[-1:8:-1])

Q30. Resverse the string given in the above question.
A.  string = "Big Data iNeuron"
    print(string[-1::-1])

Q31. How can you delete entire string at once?
A.  string = "Big Data iNeuron"
    print(string.replace(string, ''))

Q32. What is escape sequence?
A.  An escape sequence is a sequence of characters that, when used inside a character or string, does not represent itself but is converted into another character or series of characters.

Q33. How can you print the below string?
```
'iNeuron's Big Data Course'
```
A.  print("'iNeuron's Big Data Course'")

Q34. What is a list in Python?
A.  Lists are used to store multiple items in a single variable. Lists are one of 4 built-in data types in Python used to store collections of data.

Q35. How can you create a list in Python?
A.  In Python, a list is created by placing elements inside square brackets [] , separated by commas. A list can have any number of items and they may be of different types (integer, float, string, etc.). A list can also have another list as an item. This is called a nested list.

Q36. How can we access the elements in a list?
A.  To access values in lists, use the square brackets for slicing along with the index or indices to obtain value available at that index. For example −
        list1 = [1, 2, 3, 4, 5, 6, 7 ];
        print(list1[0])
        print(list1[5])

Q37. Write a code to access the word "iNeuron" from the given list.
```
lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
``` 
A.  lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
    print(lst[4][2])

Q38. Take a list as an input from the user and find the length of the list.
A.  lst = []
    lst.append(1)
    lst.append("Bhanu")
    lst.append(1.25)
    lst.append([1,2,3])

    print(len(lst))

Q39. Add the word "Big" in the 3rd index of the given list.
```
lst = ["Welcome", "to", "Data", "course"]
```
A.  lst = ["Welcome", "to", "Data", "course"]
    lst.insert(2,"Big")
    print(lst)

Q40. What is a tuple? How is it different from list?
A.  Tuples are used to store multiple items in a single variable. Tuple is one of 4 built-in data types in Python used to store collections of data. The primary difference between tuples and lists is that tuples are immutable whereas lists are mutable.

Q41. How can you create a tuple in Python?
A.  A tuple is created by placing all the items (elements) inside parentheses () , separated by commas.  A tuple can have any number of items and they may be of different types (integer, float, list, string, etc.).
    my_tuple = ("RRR", "Bahubali", "Pushpa")

Q42. Create a tuple and try to add your name in the tuple. Are you able to do it? Support your answer with reason.
A.  We can't add because tuples ae immutable.

Q43. Can two tuple be appended. If yes, write a code for it. If not, why?
A.  No two tupple cannot be appended because of their immutable property.

Q44. Take a tuple as an input and print the count of elements in it.
A.  my_tuple = ("RRR", "Bahubali", "Pushpa", "Bhanu")
    for i in range(len(my_tuple)):
        print(my_tuple[i])

Q45. What are sets in Python?
A.  Sets are used to store multiple items in a single variable. Set is one of 4 built-in data types in Python used to store collections of data.A set is a collection which is unordered, unchangeable, and unindexed.

Q46. How can you create a set?
A.  A set is created by placing all the items (elements) inside curly braces {}, separated by comma, or by using the built-in set() function.

Q47. Create a set and add "iNeuron" in your set.
A.  my_set = set()
    my_set.add("iNueron")

Q48. Try to add multiple values using add() function.
A.  my_set = set()
    my_set.add("iNueron")
    my_set.add("BigData")
    my_set.add(1)

Q49. How is update() different from add()?
A.  We can add a single element using the add() method, and multiple elements using the update() method. The update() method can take tuples, lists, strings or other sets as its argument. In all cases, duplicates are avoided.

Q50. What is clear() in sets?
A. clear() method is used to remove all elements in set.

Q51. What is frozen set?
A.  Frozen set is just an immutable version of a Python set object. While elements of a set can be modified at any time, elements of the frozen set remain the same after creation. Due to this, frozen sets can be used as keys in Dictionary or as elements of another set.

Q52. How is frozen set different from set?
A.  Frozenset is similar to set in Python, except that frozensets are immutable, which implies that once generated, elements from the frozenset cannot be added or removed. 

Q53. What is union() in sets? Explain via code.
A.  The union of two sets A and B is the set of elements which are in A, in B, or in both A and B.
    A = {1, 2, 3 , 4}
    B = {5, 6, 'b', "Bhanu"}
    print(A|B)

Q54. What is intersection() in sets? Explain via code.
A.  The intersection() method returns a new set with elements that are common to all sets.
    A = {2, 3, 5}
    B = {1, 3, 5}

    print(A.intersection(B))
    # Output: {3, 5}

Q55. What is dictionary in Python?
A.  Dictionaries are used to store data values in key:value pairs. A dictionary is a collection which is ordered, changeable and do not allow duplicates.

Q56. How is dictionary different from all other data structures.
A.  A dictionary is a general-purpose data structure for storing a group of objects. A dictionary has a set of keys and each key has a single associated value. 

Q57. How can we delare a dictionary in Python?
A.  A dictionary in Python is made up of key-value pairs. In the two sections that follow you will see two ways of creating a dictionary. The first way is by using a set of curly braces, {} , and the second way is by using the built-in dict() function.

Q58. What will the output of the following?
```
var = {}
print(type(var))
```
A.  <class 'dict'>

Q59. How can we add an element in a dictionary?
A.  We add a new element to the dictionary by using a new key as a subscript and assigning it a value.  Adding an item to the dictionary is done by using a new index key and assigning a value to it.

Q60. Create a dictionary and access all the values in that dictionary.
A.  thisdict = {
        "brand": "Ford",
        "model": "Mustang",
        "year": 1964
    }
    thisdict["color"] = "red"
    print(thisdict["brand"])
    print(thisdict["model"])
    print(thisdict["year"])
    print(thisdict["color"])

Q61. Create a nested dictionary and access all the element in the inner dictionary.
A.  people = {
        1: {
            'name': 'John', 'age': '27', 'sex': 'Male'
        },
        2: {
            'name': 'Marie', 'age': '22', 'sex': 'Female'
        }
    }

    print(people[1]['name'])
    print(people[1]['age'])
    print(people[1]['sex'])

Q62. What is the use of get() function?
A.  The get() method returns the value of the item with the specified key.

Q63. What is the use of items() function?
A.  In Python Dictionary, items() method is used to return the list with all dictionary keys with values.

Q64. What is the use of pop() function?
A.  The pop() method removes the element at the specified position.

Q65. What is the use of popitems() function?
A.  The popitem() method removes the item that was last inserted into the dictionary. 

Q66. What is the use of keys() function?
A.  The keys() method returns a view object. The view object contains the keys of the dictionary, as a list.

Q67. What is the use of values() function?
A.  The values() method returns a view object. The view object contains the values of the dictionary, as a list. 

Q68. What are loops in Python?
A.   loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string). 

Q69. How many type of loop are there in Python?
A.  There are two types of loops in Python, for and while.

Q70. What is the difference between for and while loops?
A.  Both for loop and while loop is used to execute the statements repeatedly while the program runs. The major difference between for loop and the while loop is that for loop is used when the number of iterations is known, whereas execution is done in the while loop until the statement in the program is proved wrong.

Q71. What is the use of continue statement?
A.  A continue statement ends the current iteration of a loop. Program control is passed from the continue statement to the end of the loop body. A continue statement can only appear within the body of an iterative statement, such as do , for , or while .

Q72. What is the use of break statement?
A. Break statement is used to terminate the loop.

Q73. What is the use of pass statement?
A.  The pass statement is used as a placeholder for future code. When the pass statement is executed, nothing happens, but you avoid getting an error when empty code is not allowed. Empty code is not allowed in loops, function definitions, class definitions, or in if statements.

Q74. What is the use of range() function?
A.  The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and stops before a specified number.

Q75. How can you loop over a dictionary?
A.  You can loop through a dictionary by using a for loop. When looping through a dictionary, the return value are the keys of the dictionary, but there are methods to return the values as well.

### Coding problems
Q76. Write a Python program to find the factorial of a given number.
A.  def factorial(x):
        if x == 1:
            return 1
        else:
            return (x * factorial(x-1))

    num = 7
    result = factorial(num)
    print("The factorial of", num, "is", result)

Q77. Write a Python program to calculate the simple interest. Formula to calculate simple interest is SI = (P*R*T)/100
A.  def simple_interest(p,t,r):
        si = (p * t * r)/100
        return si
    
    simple_interest(12, 8, 12)

Q78. Write a Python program to calculate the compound interest. Formula of compound interest is A = P(1+ R/100)^t.
A.  def compound_interest(principle, rate, time):
        amount = principle * (pow((1 + rate / 100), time))
        CI = amount - principle
        print("Compound interest is", CI)
 
    compound_interest(10000, 10.25, 5)

Q79. Write a Python program to check if a number is prime or not.
A.  
    num = int(input("Enter a number: "))
    flag = False

    if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                flag = True
                break

    if flag:
        print(num, "is not a prime number")
    else:
        print(num, "is a prime number")

Q80. Write a Python program to check Armstrong Number.
A.  
    num = int(input("Enter a number: "))
    sum = 0

    temp = num
    while temp > 0:
        digit = temp % 10
        sum += digit ** 3
        temp //= 10

    if num == sum:
        print(num,"is an Armstrong number")
    else:
        print(num,"is not an Armstrong number")

Q81. Write a Python program to find the n-th Fibonacci Number.
A.  
    def Fibonacci(n):
        if n<= 0:
            print("Incorrect input")
        elif n == 1:
            return 0
        elif n == 2:
            return 1
        else:
            return Fibonacci(n-1)+Fibonacci(n-2)

    print(Fibonacci(10))

Q82. Write a Python program to interchange the first and last element in a list.
A.  def swapList(list1):
        size = len(list1)
        
        temp = list1[0]
        list1[0] = list1[size - 1]
        list1[size - 1] = temp
        
        return list1
     
    list1 = [1,2,3,4,5]
    print(swapList(list1))

Q83. Write a Python program to swap two elements in a list.
A.  def swapping(list1, i, j):
        list1[i], list1[j] = list1[j], list1[i]
        return list1

    list1 = [1,2,3,4,5]
    i = 1
    j = 3
    print(swapping(list1, i-1 ,j-1))

Q84. Write a Python program to find N largest element from a list.
A.  list1 = [2,1,3,4,6,7,11,0]
    n = int(input())
    list1.sort()
    print(list1[-n])

Q85. Write a Python program to find cumulative sum of a list.
A.  list1 = [10, 20, 30, 40, 50]
    s = list1[0]
    for i in range(1,len(list1)):
        list1[i] = s + list1[i]
        s = list1[i]
    
    print(list1)
    
Q86. Write a Python program to check if a string is palindrome or not.
A.  str1 = input("Enter string")
    str2 = str[::-1]
    if(str1 == str2):
        print("String is a palindrome")
    else:
        print("String is not a palindrome")

Q87. Write a Python program to remove i'th element from a string.
A.  string = input("Enter string")
    i = int(input("Enter i'th element"))
    a = string[ : i] 
    b = string[i + 1: ]
    print(a+b)

Q88. Write a Python program to check if a substring is present in a given string.
A.  string = input("Enter string")
    substring = input("Enter substring")
    if substring in string:
        print("Yes the substring is present in the string")
    else:
        print("No the substring is not present in the string")

Q89. Write a Python program to find words which are greater than given length k.
A.  string = input("Enter string")
    k = int(input())
    string_list = []
    word = string.split(" ")
    for i in word:
        if len(i) > k:
            string_list.append(i)
    
    print(string_list)

Q90. Write a Python program to extract unique dictionary values.
A.  test_dict = {'iNueron' : [5, 6, 7, 8],
            'shashank Mishra' : [10, 11, 7, 5],
            'Bhanu' : [6, 12, 10, 8],
            'Krish Naik' : [1, 2, 5]}
 
    print("The original dictionary is : " + str(test_dict))
    
    x=list(test_dict.values())
    y=[]
    res=[]
    for i in x:
        y.extend(i)
    for i in y:
        if i not in res:
            res.append(i)
    res.sort()
    print("The unique values list is : " + str(res))

Q91. Write a Python program to merge two dictionary.
A.  dict_1 = {1: 'a', 2: 'b'}
    dict_2 = {2: 'c', 4: 'd'}

    print(dict_1 | dict_2)

Q92. Write a Python program to convert a list of tuples into dictionary.
```
Input : [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
Output : {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}
```
A.  list_1 = [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
    dict_1 = dict()

    for cricketer, jersey_number in list_1:
        dict_1.setdefault(cricketer, []).append(jersey_number)
    print(dict_1)

Q93. Write a Python program to create a list of tuples from given list having number and its cube in each tuple.
```
Input: list = [9, 5, 6]
Output: [(9, 729), (5, 125), (6, 216)]
```
A.  list = [9, 5, 6]
    res = [(val, pow(val, 3)) for val in list]
    print(res)

Q94. Write a Python program to get all combinations of 2 tuples.
```
Input : test_tuple1 = (7, 2), test_tuple2 = (7, 8)
Output : [(7, 7), (7, 8), (2, 7), (2, 8), (7, 7), (7, 2), (8, 7), (8, 2)]
```
A.  test_tuple1 = (7, 2)
    test_tuple2 = (7, 8)

    result =  [(x, y) for x in test_tuple1 for y in test_tuple2]
    result = result +  [(x, y) for x in test_tuple2 for y in test_tuple1]
    print(str(result))

Q95. Write a Python program to sort a list of tuples by second item.
```
Input : [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
Output : [('Geeks', 8), ('for', 24), ('Geeks', 30)]
```
A.  tup = [('for', 24), ('Geeks', 8), ('Geeks', 30)]

    lst = len(tup)
    for i in range(0, lst):
        for j in range(0, lst-i-1):
            if (tup[j][1] > tup[j + 1][1]):
                temp = tup[j]
                tup[j]= tup[j + 1]
                tup[j + 1]= temp

    print(tup)

Q96. Write a python program to print below pattern.
```
* 
* * 
* * * 
* * * * 
* * * * * 
```
A.  n = int(input())
    for i in range(0, n):
        for j in range(0, i+1):
            print("* ",end="")

        print("\r")

Q97. Write a python program to print below pattern.
```
    *
   **
  ***
 ****
*****
```
A.  n = int(input())
    while(i<=n):
        print(" " * (n - i) +"*" * i)
        i+=1

Q98. Write a python program to print below pattern.
```
    * 
   * * 
  * * * 
 * * * * 
* * * * * 
```
A.  n = int(input())
    k = n-1
    for i in range(0, n):
        for j in range(0, k):
            print(end=" ")
        k = k - 1

        for j in range(0, i+1):
            print("* ", end="")

        print("\r")
 

Q99. Write a python program to print below pattern.
```
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5
```
A.  n = int(input()) 
    num = 1

    for i in range(0, n):
        num = 1
        for j in range(0, i+1):
            print(num, end=" ")
            num = num + 1

        print("\r")

Q100. Write a python program to print below pattern.
```
A 
B B 
C C C 
D D D D 
E E E E E 
```
A.  
    n = int(input())
    num = 65 #initializing value corresponding to 'A' ASCII value
 
    for i in range(0, n):
        for j in range(0, i+1):
            ch = chr(num)
            print(ch, end=" ")
        num = num + 1
        
        print("\r")
 